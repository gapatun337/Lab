import math
import random

def task1():

 def is_square(num):
    if num < 0:
        return False
    else:
        sqrt = math.isqrt(num)
        return sqrt * sqrt == num

import math

def is_square(num):
    if num < 0:
        return False
    else:
        sqrt = math.isqrt(num)
        return sqrt * sqrt == num

def is_divisible_by_six(num):
    return num % 6 == 0

def number_checker():
    while True:
        user_input = input("Введите число (для выхода введите 'q'): ")
        if user_input == 'q':
            break
        try:
            number = int(user_input)
            if is_square(number):
                print("Число является квадратом целого числа")
            else:
                print("Число не является квадратом целого числа")
            if is_divisible_by_six(number):
                print("Число делится на 6 без остатка")
            else:
                print("Число не делится на 6 без остатка")
        except ValueError:
            print("Некорректный ввод! Попробуйте еще раз")

number_checker()

task1()




import numpy as np
import matplotlib.pyplot as plt
def task2():
 import numpy as np
 import matplotlib.pyplot as plt
def f(x):
    if x >= 0:
        return 2 * x**3 - 2
    else:
        return -np.sin(x)

def plot_function(a, b):
    x = np.linspace(a, b, 1000)
    y = np.vectorize(f)(x)

    plt.plot(x, y)
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.title('График функции f(x)')
    plt.grid(True)
    plt.show()

a = float(input("Введите значение a: "))
b = float(input("Введите значение b: "))

plot_function(a, b)

task2() 





def task3():

 import math
def decimal_in_new_numeral_system(number, base):
    integer_part = int(number)
    fractional_part = number - integer_part

    integer_result = ""
    while integer_part > 0:
        remainder = integer_part % base
        integer_part //= base

        if remainder > 9:
            remainder = chr(ord('A') + remainder - 10)

        integer_result = str(remainder) + integer_result

    fractional_result = ""
    precision = 10
    while fractional_part > 0 and precision > 0:
        fractional_part *= base
        integer_part = int(fractional_part)
        fractional_part -= integer_part

        if integer_part > 9:
            integer_part = chr(ord('A') + integer_part - 10)

        fractional_result += str(integer_part)
        precision -= 1

    result = "{}.{}".format(integer_result, fractional_result)
    return result

number = float(input("Введите десятичную дробь: "))
base = int(input("Введите основание новой системы счисления: "))

result = decimal_in_new_numeral_system(number, base)
print("Результат: {}".format(result))

task3()




def task4():

 import numpy as np
 import matplotlib.pyplot as plt

# Фигура 1
x_figure1 = [3, 5, 4, 6, 7]  # обновлены координаты точек
y_figure1 = [0, -1, 2, 4, 0]  # обновлены координаты точек

# Окружность фигуры 1
center1 = (5, 0)
radius1 = 2
theta1 = np.linspace(0, np.pi, 100)
x_circle1 = center1[0] + radius1 * np.cos(theta1)
y_circle1 = center1[1] - radius1 * np.sin(theta1)

# Фигура 2
x_figure2 = [-3, -5, -4, 0, 4, 1]
y_figure2 = [3, 2, -2, -1, 4, 3]

# Окружность фигуры 2
center2 = (-1, 3)
radius2 = 2
theta2 = np.linspace(0, np.pi, 100)
x_circle2 = center2[0] + radius2 * np.cos(theta2)
y_circle2 = center2[1] + radius2 * np.sin(theta2)

# Ввод координат точки пользователем
user_x = float(input("Введите значение x для точки: "))
user_y = float(input("Введите значение y для точки: "))

# График
fig, ax = plt.subplots()

# Фигура 1
ax.plot(x_figure1, y_figure1, color='blue')

# Окружность фигуры 1
ax.plot(x_circle1, y_circle1, color='blue')

# Фигура 2
ax.plot(x_figure2, y_figure2, color='blue')

# Окружность фигуры 2
ax.plot(x_circle2, y_circle2, color='blue')

# Точка пользователя
ax.scatter(user_x, user_y, color='red')

# Проверка, находится ли точка внутри фигуры
is_inside_figure = (user_x >= min(x_figure1) and user_x <= max(x_figure1) and
                    user_y >= min(y_figure1) and user_y <= max(y_figure1)) or (
                        user_x >= min(x_figure2) and user_x <= max(x_figure2) and
                        user_y >= min(y_figure2) and user_y <= max(y_figure2)) or (
                            user_x - center2[0])**2 + (user_y - center2[1])**2 <= radius2**2

if is_inside_figure:
    plt.title("Точка находится внутри фигуры", fontsize=12)
else:
    plt.title("Точка не попадает в фигуру", fontsize=12)

# Отображение графика
plt.grid(True)
plt.xlabel("x", fontsize=10)
plt.ylabel("y", fontsize=10)
plt.show()

task4()





def task5():
    
 import math
def square_and_cube_numbers(number):
    str_number = str(number)
    first_digit = int(str_number[0])
    last_digit = int(str_number[-1])

    if first_digit % 2 == 0 and last_digit == 0:
        result = number ** 3
    elif first_digit % 2 == 1 and last_digit % 2 == 1:
        result = number ** 2
    else:
        result = None

    return result

number = int(input("Введите число: "))

result = square_and_cube_numbers(number)
if result is not None:
    print(result)
else:
    print("Число не удовлетворяет условиям.")   
    
task5()





def task6():
 import math
def calculate_remaining_months(labworks_total, consultations_per_month, attempts_per_consultation):
    months = 0

    while labworks_total > 0:
        months += 1
        attempts_this_month = consultations_per_month * attempts_per_consultation

        labworks_total -= attempts_this_month

        if labworks_total > 0:
            consultations_per_month = max(0, consultations_per_month - 1)
            attempts_per_consultation = max(1, attempts_per_consultation - 1)

    return months


labworks_total = int(input("Введите количество лабораторных работ: "))
consultations_per_month = int(input("Введите количество консультаций в месяц: "))
attempts_per_consultation = int(input("Введите количество попыток на каждой консультации: "))

remaining_months = calculate_remaining_months(labworks_total, consultations_per_month, attempts_per_consultation)
print("Оставшееся количество месяцев:", remaining_months)  
    
task6()

def task7():
 import math
def calculate_product(n):
    cos_product = 1
    sin_product = 1

    for i in range(1, n+1):
        cos_product *= math.cos(i)
    
    for i in range(2, 2*n+1, 2):
        sin_product *= math.sin(i)
    
    result = cos_product / sin_product
    return result

n = int(input("Введите значение n: "))
result = calculate_product(n)
print("Произведение числовой последовательности:", result)

task7()





import math
def task8():
 import math

# Вычисление первого выражения
result1 = 0

for i in range(1, 9):
    for j in range(1, i+1):
        term = (j**math.cos(i) + i**math.cos(j))**2
        result1 += term

# Вычисление второго выражения
result2 = 1.0

for i in range(1, 6):
    sub_result = 1.0
    for j in range(1, i+1):
        sub_result *= math.sin(j ** math.cos(i))
    result2 *= sub_result

# Вычисление третьего выражения
result3 = 1.0

for i in range(1, 9):
    sub_result = 1.0
    for j in range(i, 2*i):
        for k in range(i+j, 2*(i+j)+1):
            sub_result += (2*math.cos(j) - 3*math.log(i + 0.5*k))
    result3 *= sub_result

# Вывод результатов
print("Результат первого выражения:", result1)
print("Результат второго выражения:", result2)
print("Результат третьего выражения:", result3)
task8()